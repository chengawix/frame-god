{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg","wix-api.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","react_default","a","createElement","className","src","logo","alt","onClick","wixData","get","then","results","setState","JSON","stringify","console","log","concat","catch","error","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p","uuidv4","require","queue","addEventListener","event","type","origin","requestId","responseBody","isError","handler","collection","id","Promise","resolve","reject","message","parent","postMessage","request","api","args"],"mappings":"4RA2CeA,cArCb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,KAAM,wBAHKR,wEAMN,IAAAS,EAAAN,KACP,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,SAAIT,KAAKI,MAAMC,MACfE,EAAAC,EAAAC,cAAA,UACEK,QAAS,kBAAIC,UAAQC,IAAI,OAAQ,aAC9BC,KAAK,SAACC,GACLZ,EAAKa,SAAS,CAACd,KAAKe,KAAKC,UAAUH,KACnCI,QAAQC,IAAR,cAAAC,OAA0BJ,KAAKC,UAAUH,OACxCO,MAAM,SAACC,GACRJ,QAAQC,IAAR,gBAAAC,OAA4BJ,KAAKC,UAAUK,SANjD,0BAWAnB,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACViB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,4BAxBQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxC,IAAMC,EAASC,EAAQ,IAEnBC,EAAQ,GAgBZpB,OAAOqB,iBAAiB,UAAW,SAACC,GAAQ,IACnCjD,EAAgBiD,EAAhBjD,KACAkD,GADgBD,EAAVE,OACyCnD,EAA/CkD,MAAME,EAAyCpD,EAAzCoD,UAAgBC,EAAyBrD,EAA9BA,KAAmBsD,EAAWtD,EAAXsD,QACzC,GAAa,YAATJ,EAAoB,CACpB,GAAIH,EAAMK,GAAY,CAClB,IAAIG,EAAUR,EAAMK,GAChBE,EAASC,EAAQ,GAAGF,EAAahC,OAChCkC,EAAQ,GAAGF,UAIbN,EAAMK,MAIrBX,EAAOC,QAAU,CACbhC,QAAS,CACLC,IAAK,SAAC6C,EAAYC,GACd,OAhCZ,SAAiBzD,GACb,IAAIoD,EAAYP,IAChB,OAAO,IAAIa,QAAQ,SAACC,EAASC,GACzBb,EAAMK,GAAa,CAACO,EAASC,GAC7B,IAAIC,EAAU,CACVvD,IAAK,aACL4C,KAAM,UACNE,UAAWA,EACXpD,KAAMA,GAEV2B,OAAOmC,OAAOC,YAAYF,EAAS,OAsBxBG,CAAQ,CACXC,IAAK,aACLC,KAAM,CAACV,EAAYC","file":"static/js/main.c478fb2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { wixData } from \"./wix-api\";\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      data: \"This is React In Wix\"\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>{this.state.data}</p>\n          <button\n            onClick={()=>wixData.get(\"apps\", \"sampleApp\")\n              .then((results)=>{\n                this.setState({data:JSON.stringify(results) })\n                console.log(`res in app ${JSON.stringify(results)}`)\n              }).catch((error)=>{\n                console.log(`error in app ${JSON.stringify(error)}`)\n              })}\n          >\n            Load Data From WixData\n          </button>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React 111\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const uuidv4 = require('uuid/v4');\r\n\r\nlet queue = {};\r\n\r\nfunction request(data){\r\n    let requestId = uuidv4();\r\n    return new Promise((resolve, reject)=>{\r\n        queue[requestId] = [resolve, reject];\r\n        let message = {\r\n            src: \"descendant\",\r\n            type: \"wix-api\",\r\n            requestId: requestId,\r\n            data: data\r\n        };\r\n        window.parent.postMessage(message, \"*\");\r\n    });\r\n}\r\n\r\nwindow.addEventListener(\"message\", (event)=>{\r\n    let {data, origin} = event;\r\n    let {type, requestId, data:responseBody, isError} = data;\r\n    if (type === \"wix-api\") {\r\n        if (queue[requestId]) {\r\n            let handler = queue[requestId];\r\n            if (isError) handler[1](responseBody.error);\r\n            else handler[0](responseBody);\r\n        }\r\n        \r\n        \r\n        delete queue[requestId];\r\n    }\r\n})\r\n\r\nmodule.exports = {\r\n    wixData: {\r\n        get: (collection, id) =>{\r\n            return request({\r\n                api: \"wixDataGet\",\r\n                args: [collection, id]\r\n            })\r\n        }\r\n        // ,query(collection, )\r\n    }\r\n}"],"sourceRoot":""}